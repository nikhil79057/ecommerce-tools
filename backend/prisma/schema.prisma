generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        String    @default("seller") // seller, admin
  isVerified  Boolean   @default(false)
  verificationToken String?
  resetToken  String?
  resetTokenExpiry DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Seller specific
  subscriptions Subscription[]
  invoices      Invoice[]
  usage         Usage[]
  
  @@map("users")
}

model Tool {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  icon        String
  price       Decimal   @db.Decimal(10, 2) // Monthly price
  isActive    Boolean   @default(true)
  features    String?   @db.Text // JSON string of features
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  subscriptions Subscription[]
  usage         Usage[]
  
  @@map("tools")
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String
  toolId          String
  razorpaySubId   String?   @unique
  status          String    @default("active") // active, cancelled, expired, pending
  startDate       DateTime  @default(now())
  endDate         DateTime
  amount          Decimal   @db.Decimal(10, 2)
  billingCycle    String    @default("annual") // monthly, annual
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([toolId])
  @@map("subscriptions")
}

model Invoice {
  id              String    @id @default(cuid())
  userId          String
  invoiceNumber   String    @unique
  amount          Decimal   @db.Decimal(10, 2)
  status          String    @default("pending") // pending, paid, failed
  type            String    @default("subscription") // subscription, manual
  description     String    @db.Text
  razorpayOrderId String?
  pdfPath         String?
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("invoices")
}

model Usage {
  id        String    @id @default(cuid())
  userId    String
  toolId    String
  count     Int       @default(1)
  metadata  String?   @db.Text // JSON string for tool-specific data
  ipAddress String?
  userAgent String?   @db.Text
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool      Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([toolId])
  @@index([createdAt])
  @@map("usage")
}

model LandingPageContent {
  id          String    @id @default(cuid())
  section     String    @unique // hero, features, pricing, footer
  content     String    @db.Text // JSON string
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt
  
  @@map("landing_content")
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String    @unique
  subject     String
  htmlContent String    @db.Text
  textContent String?   @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("email_templates")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  keyName     String
  keyValue    String    @unique
  permissions String    @db.Text // JSON array of permissions
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("api_keys")
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  action      String    // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource    String    // users, tools, subscriptions, etc.
  resourceId  String?
  details     String?   @db.Text // JSON string with additional details
  ipAddress   String?
  userAgent   String?   @db.Text
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}